-- Create app_settings table for global application settings
CREATE TABLE public.app_settings (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    setting_key TEXT NOT NULL UNIQUE,
    setting_value JSONB NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;

-- Only administrators can view settings
CREATE POLICY "Administrators can view app settings"
ON public.app_settings
FOR SELECT
USING (has_role(auth.uid(), 'administrator'::app_role));

-- Only administrators can insert settings
CREATE POLICY "Administrators can insert app settings"
ON public.app_settings
FOR INSERT
WITH CHECK (has_role(auth.uid(), 'administrator'::app_role));

-- Only administrators can update settings
CREATE POLICY "Administrators can update app settings"
ON public.app_settings
FOR UPDATE
USING (has_role(auth.uid(), 'administrator'::app_role));

-- Create trigger for automatic timestamp updates
CREATE TRIGGER update_app_settings_updated_at
BEFORE UPDATE ON public.app_settings
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

-- Insert default setting for user registration
INSERT INTO public.app_settings (setting_key, setting_value, description)
VALUES (
    'user_registration_enabled',
    'true'::jsonb,
    'Controls whether new users can register for accounts'
);